#JORGE NAVARRO MANZANO Script vmware weekly performance vms
#last 7 days report with performance of vms
#info: vCenter, VM, ESX, OS, CPUnum, CPUmax, CPUavg, CPUmin, CPUready, DiskmaxMB, DiskavgMB, DiskminMB
#info: DiskmaxLatencyms, DiskavgLatencyms, DiskminLatencyms, NetmaxMB, NetavgMB, NetminMB
#https://linkedin.com/in/jorgenavarromanzano
#more scripts here https://github.com/jorgenavarromanzano

#Instructions:
#create ..\vcenters.txt
#example:
#vcenter1
#vcenterb
#vcenter2000
#create ..\credentials.txt
#example:
#useradminvcenter,passwordoftheuser
#you need access to port 443 of the vcenters

#change this variables to your emails and smtpserver:
$destemail = "destmail@mail.com"
$origemail = "origmail@mail.com"
$smtpserver = "localhost"

$error.clear()

Add-PSSnapin VMware.VimAutomation.Core
Start-Transcript log.txt -append

$vcenters = Get-Content -Path ..\vcenters.txt
$credentials = Get-Content -Path ..\credentials.txt
$user = ($credentials -split ",")[0]
$password = ($credentials -split ",")[1]
Connect-VIServer $vcenters -User $user -Password $password

$dias=7;$Start=(get-date).adddays(-$dias);$Finish=get-date

$infovms=@()
$alertasvms=@()
$correo = "performance info of vms from last 7 days, review infovms.csv/html and alertsvms.html for vms with performance problems"

ForEach ($VM in (Get-VM | ? {$_.PowerState -eq "PoweredOn"} | Sort uid,Name))
{
	if($vm.powerState -eq "PoweredOn")
	{
		$nodo = "" | Select Nodo, "VCenter", "HostESX", "OS", "CPUnum", "CPUmax", "CPUavg", "CPUmin", "CPUready", "DiskmaxMB", "DiskavgMB", "DiskminMB", "DiskmaxLatencyms", "DiskavgLatencyms", "DiskminLatencyms", "NetmaxMB", "NetavgMB", "NetminMB"
		$nodo.Nodo = $VM.Name
		$vcenter= $VM.uid -split "@" -split ":443"
		$nodo.VCenter = $vcenter[1]
		$nodo.HostESX = $VM.VMHost
		$nodo.OS = $VM.guest.OSFullName
		$nodo.CPUnum = $VM.NumCPU
		$cpustat = get-stat -entity $VM -Start $Start -Finish $Finish -Stat "cpu.usage.average" | Measure-Object -Property Value -Average -maximum -minimum
		$nodo.CPUmax = "{0:N0}" -f $($cpustat.maximum)
		$nodo.CPUavg = "{0:N0}" -f $($cpustat.average)
		$nodo.CPUmin = "{0:N0}" -f $($cpustat.minimum)
		$nodo.CPUready = "{0:N0}" -f $(((get-stat -entity $VM -Start $Start -Finish $Finish -Stat "Cpu.Ready.Summation" | Measure-Object -Property Value -Average).average)/18000 / $nodo.CPUnum)
		$discousostat = get-stat -entity $VM -Start $Start -Finish $Finish -Stat "disk.usage.average" | Measure-Object -Property Value -Average -maximum -minimum
		$nodo.DiskmaxMB = "{0:N0}" -f $($discousostat.maximum/1024)
		$nodo.DiskavgMB = "{0:N0}" -f $($discousostat.average/1024)
		$nodo.DiskminMB = "{0:N0}" -f $($discousostat.minimum/1024)
		$discolatstat = get-stat -entity $VM -Start $Start -Finish $Finish -Stat "disk.maxTotalLatency.latest" | Measure-Object -Property Value -Average -maximum -minimum
		$nodo.DiskmaxLatencyms = $discolatstat.maximum
		$nodo.DiskavgLatencyms = "{0:N0}" -f $($discolatstat.average)
		$nodo.DiskminLatencyms = $discolatstat.minimum
		
		$nics = $vm.networkadapters
		if(($nics).connectionstate.connected -eq $true -and $nics.count -gt 0)
		{
			$redusostat = get-stat -entity $VM -Start $Start -Finish $Finish -Stat "net.usage.average" | Measure-Object -Property Value -Average -maximum -minimum
			$nodo.NetmaxMB = "{0:N0}" -f $($redusostat.maximum/1024)
			$nodo.NetavgMB = "{0:N0}" -f $($redusostat.average/1024)
			$nodo.NetminMB = "{0:N0}" -f $($redusostat.minimum/1024)
		}
		else
		{
			$nodo.NetmaxMB = 0
			$nodo.NetavgMB = 0
			$nodo.NetminMB = 0
		}
		$nodo
		$infovms+=$nodo
		
		if([int]$nodo.CPUavg -gt 75 -or [int]$nodo.CPUready -gt 5 -or [int]$nodo.DiskavgMB -gt 100 -or [long]$nodo.DiskmaxLatencyms -gt 1000 -or [int]$nodo.DiskavgLatencyms -gt 50)
		{
			$nodoalerta = "" | Select Nodo, "VCenter", "OS", "CPUnum", "CPUavg", "CPUready", "DiskavgMB", "DiskmaxLatencyms", "DiskavgLatencyms"
			$nodoalerta.Nodo = $nodo.Nodo;$nodoalerta.Vcenter = $nodo.VCenter;$nodoalerta.OS = $nodo.OS;$nodoalerta.CPUnum = $nodo.CPUnum;$nodoalerta.CPUavg = $nodo.CPUavg;$nodoalerta.CPUready = $nodo.CPUready;$nodoalerta.DiskavgMB = $nodo.DiskavgMB;$nodoalerta.DiskmaxLatencyms = $nodo.DiskmaxLatencyms;$nodoalerta.DiskavgLatencyms = $nodo.DiskavgLatencyms;
			$alertasvms += $nodoalerta
			clear-variable nodoalerta
		}
		clear-variable nodo
	}
}

$infovms | export-csv infovms.csv
$infovms | convertto-html | out-file infovms.html
$alertasvms | convertto-html -body "thresholds: CPUavg > 75% | CPUready > 5% | DiskavgMB/s > 100MB/s | DiskmaxLatencyms > 1000ms | DiskavgLatencyms > 50ms " | out-file alertsvms.html

send-mailmessage -from $origemail -to $destemail -subject "VMware PowerCLI weekly performance vms" -body $correo -Attachments "infovms.csv","infovms.html","alertsvms.html" -smtpServer $smtpserver

if($error.count -gt 0)
{
	$errores = Out-String -Inputobject $error
	send-mailmessage -from $origemail -to $destemail -subject "VMware PowerCLI weekly performance vms, execution error" -body $errores -smtpServer $smtpserver
}

Stop-Transcript

if( [int]((Get-ChildItem .\log.txt).Length / 1024 / 1024) -gt 200)
{
	if(test-path .\log.txt.old)
	{
		remove-item	.\log.txt.old
	}
	Rename-Item .\log.txt .\log.txt.old
}
